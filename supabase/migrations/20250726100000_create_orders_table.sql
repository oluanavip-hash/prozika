/*
# Create Orders Table
This migration creates the `orders` table to store customer and order details from the checkout process.

## Query Description: This operation creates a new table named `orders` in the `public` schema. It is designed to store all necessary information for a customer's order, including personal data, shipping address, and the items purchased. This is a non-destructive operation as it only adds a new table and does not modify or delete any existing data.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Low"
- Requires-Backup: false
- Reversible: true

## Structure Details:
- Table: `public.orders`
- Columns:
  - `id`: Primary Key, auto-incrementing.
  - `created_at`: Timestamp of order creation.
  - `customer_name`: Customer's full name.
  - `customer_email`: Customer's email.
  - `customer_phone`: Customer's phone number.
  - `shipping_cep`: Shipping address CEP.
  - `shipping_street`: Shipping address street.
  - `shipping_number`: Shipping address number.
  - `shipping_complement`: Shipping address complement.
  - `shipping_neighborhood`: Shipping address neighborhood.
  - `shipping_city`: Shipping address city.
  - `shipping_state`: Shipping address state.
  - `order_items`: JSONB array of items in the order.
  - `total_price`: Total price of the order.
  - `status`: Status of the order (e.g., 'pending').

## Security Implications:
- RLS Status: Enabled
- Policy Changes: Yes
- Auth Requirements: Policies are created to allow anonymous users to create orders, but restrict read/update/delete access to ensure data privacy.

## Performance Impact:
- Indexes: A primary key index is automatically created on the `id` column.
- Triggers: None.
- Estimated Impact: Low. This is a standard table creation.
*/

-- 1. Create the orders table
CREATE TABLE public.orders (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    customer_name text not null,
    customer_email text not null,
    customer_phone text,
    shipping_cep text not null,
    shipping_street text not null,
    shipping_number text not null,
    shipping_complement text,
    shipping_neighborhood text not null,
    shipping_city text not null,
    shipping_state text not null,
    order_items jsonb not null,
    total_price numeric(10, 2) not null,
    status text not null default 'pending'
);

-- 2. Add comments to the table and columns for clarity
COMMENT ON TABLE public.orders IS 'Stores customer orders, including personal, shipping, and item details.';
COMMENT ON COLUMN public.orders.customer_name IS 'Full name of the customer.';
COMMENT ON COLUMN public.orders.customer_email IS 'Email address of the customer.';
COMMENT ON COLUMN public.orders.customer_phone IS 'Phone number of the customer.';
COMMENT ON COLUMN public.orders.shipping_cep IS 'CEP (postal code) for the shipping address.';
COMMENT ON COLUMN public.orders.order_items IS 'JSON array of products in the order, including product_id, name, size, quantity, and price.';
COMMENT ON COLUMN public.orders.total_price IS 'Total cost of the order.';
COMMENT ON COLUMN public.orders.status IS 'Current status of the order (e.g., pending, paid, shipped).';


-- 3. Enable Row Level Security (RLS)
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;

-- 4. Create policies for the 'orders' table
-- Allow anonymous users to insert their own orders.
CREATE POLICY "Allow anonymous users to create orders"
ON public.orders
FOR INSERT
TO anon
WITH CHECK (true);

-- Restrict anonymous users from seeing any orders.
CREATE POLICY "Deny anonymous read access"
ON public.orders
FOR SELECT
TO anon
USING (false);

-- Restrict authenticated users from seeing any orders (for now, can be updated later).
CREATE POLICY "Deny authenticated read access"
ON public.orders
FOR SELECT
TO authenticated
USING (false);

-- Disallow updates and deletes from client-side for all users.
CREATE POLICY "Disallow client-side updates"
ON public.orders
FOR UPDATE
USING (false);

CREATE POLICY "Disallow client-side deletes"
ON public.orders
FOR DELETE
USING (false);
